[{"body":"#1050 Link Plugin v1.2.0 concurrency issues\n\nFor reference a C&P from https://github.com/zsawyer/mumble-LinkAPI/issues/1#issuecomment-26849323:\r\n\r\n\"The possibility of races is a known issue for the link protocol. While every link consuming application must be prepared to handle invalid data the effect of the races are rather harmless. The most likely fields to race are the float vectors and if those aren't from the same frame this (usually) won't cause any audible errors. The other fields don't change so much and if you actually happen to race on them you'll have garbage data until the next read (which likely isn't noticeable either). We though about locking schemes but that's not that straight-forward cross-platform.\"\r\n\r\nAs to how this might be resolved in the future: I'm not sure which way is best. It's tricky. Reliable behavior based on fields in the structure aren't that easy to manage as you would need memory barriers to ensure your assumptions about when a field is updated are actually correct. System specific synchronization primitives would have to be used in a completely non-blocking way (can't block the game, can't block fetching) which should certainly be possible.\r\n\r\nWhat's most important is to keep it simple. If users can't understand what we do on the first glance they won't bother taking the risk to integrate this code into their game. The current code gives us that so we are reluctant to touch it for what - from experience - is still a theoretical issue (not the races - those will happen - but visible negative effects on UX).\r\n","user":{"login":"dD0T"},"created_at":"2013-10-25T15:46:56.934Z"},{"body":"#1050 Link Plugin v1.2.0 concurrency issues\n\nThanks for your reply. \r\n\r\nAlso from [that issue thread](https://github.com/zsawyer/mumble-LinkAPI/issues/1#issuecomment-26969302). \r\n\u003e The API could probably facilitate the cross-platform capabilities where possible (pthread, pthread w32 comes to mind) but also support legacy non-synched structures. This way the API user doesn't have to worry about race conditions but simply uses the API.\r\n\r\n\u003e While in most games the race-conditions might not have an audible effect I imagine that this is going to be a problem with games that utilize high velocity (flight or space simulators) where movement means a big change in those position vectors. I also remember already having weird audio position effects when in a vehicle in PR:BF2 - that might be related.\r\n\r\n\u003e What adds to my fear of race conditions is that I imagine that they happen always when the write cycle is faster than the read cycle. I am not sure how likely that is but definitely depends on the implementation of the Link-Plugin using code.\"\r\n\r\n\r\nIt is true that the concept of synchronization barriers is trickier than simply reading/writing whenever. However I imagine that the clientele we are talking about (game developers) would have knowledge of the parallel processing domain. And even if not the proposed legacy support would allow them to ignore the above. \r\n\r\nAside from that the memory structure could probably use an overhaul anyways. The huge context and the tiny identity do not seem to fit the current use-cases anymore. \r\nFor the context: it mustn't hold more than the game and server info. Everything else is managed by identity's contents. It seems to me that the case where extended support is used the first thing that happens is that the player is separated/moved into a different channel, assigned talk rights and all those complex things based on a very size-wise limited identity. \r\n","user":{"email":"zsawyer@users.sourceforge.net"},"created_at":"2013-10-26T05:39:45.041Z"}]
